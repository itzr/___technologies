apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: degov-deployment
spec:
  # Label selector for pods. Existing ReplicaSets whose pods are selected by this will
  # be the ones affected by this deployment.
  # It must match the pod template's labels.
  selector:
    # matchLabels is a map of {key,value} pairs.
    matchLabels:
      app: degov-pod
  replicas: 4 # tells deployment to run 4 pods matching the template
  # Template describes the pods that will be created.
  # Pods = a group of one or more Containers
  template:
    metadata:
      # Map of string keys and values that can be used to organize and
      # categorize (scope and select) objects.
      # May match selectors of replication controllers and services.
      # More info: http://kubernetes.io/docs/user-guide/labels
      name: degov-pod
      labels:
        app: degov-pod
    spec:
      # containers (array). List of containers belonging to the pod.
      # Yaml sequence is interpreted as an array. e.g:
      # - String 1
      # - String 2
      # - String 3
      containers:
        - name: node-server
          image: server_node:latest
          imagePullPolicy: IfNotPresent
          # args: docker CMD used as default.
          # command: docker ENTRYPOINT used as default. Not executed within a shell
          # TODO: Currently I use CMD not ENTRYPOINT.
          command: ["ping", "8.8.8.8"]
          ports:
            - containerPort: 8080
            - containerPort: 3001
              # Other: hostIP || hostPost || name || protocol
          # args && command => docker image info used as default.
          # env
          # ports => ** List of ports to expose from the container. (https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#containerport-v1-core)
          # resources => ** compute resources required (https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#resourcerequirements-v1-core)
          # tty => Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
          # volumeMounts => Pod volumes to mount into the container's filesystem. Cannot be updated.
          # workingDir => Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        - name: rabbitmq-server
          image: "rabbitmq:3-management"
          imagePullPolicy: IfNotPresent
          # don't ping here. it will fail.
#          command: ["ping", "8.8.8.8"]
          ports:
            - containerPort: 5672
            - containerPort: 15672
            - containerPort: 25672
      # volumes specified here
      # subdomain specified here
  # no need for links because: all containers in the same pod are accessible in Kubernetes
# --- separator (3 x -)
---
apiVersion: v1 # for versions before 1.9.0 use apps/v1beta2
# An abstract way to expose an application running on a set of Pods as a network service.
# Overview: https://kubernetes.io/docs/concepts/services-networking/service/
kind: Service
